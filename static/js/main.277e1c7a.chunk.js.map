{"version":3,"sources":["components/SpectrumList.js","App.js","serviceWorker.js","index.js"],"names":["Spectrum","data","className","map","song","name","duration","average_frequency","converted_frequency","ahsl","hsl","style","background","h","s","l","color","App","SpectrumList","Output","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4l5qBAgCeA,EA7BE,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACb,yBAAKC,UAAU,SACVD,EAAKA,KAAKE,KAAI,SAAAC,GAAS,IACdC,EAAsED,EAAtEC,KAAMC,EAAgEF,EAAhEE,SAAUC,EAAsDH,EAAtDG,kBAAmBC,EAAmCJ,EAAnCI,oBAAqBC,EAAcL,EAAdK,KAAMC,EAAQN,EAARM,IACtE,OAAO,yBAAKR,UAAU,QACpB,yBAAKA,UAAU,eAAc,4BAAKG,IAElC,yBAAKH,UAAU,wBAAuB,0CACtC,yBAAKA,UAAU,iBAAgB,2BAAII,IAEnC,yBAAKJ,UAAU,iCAAgC,mDAC/C,yBAAKA,UAAU,0BAAyB,2BAAIK,IAE5C,yBAAKL,UAAU,mCAAkC,qDACjD,yBAAKA,UAAU,4BAA2B,2BAAIM,IAE9C,yBAAKN,UAAU,6BAA4B,+CAC3C,yBAAKA,UAAU,sBAAqB,yBAAKS,MAAO,CAAEC,WAAW,OAAD,OAASH,EAAKI,EAAd,aAAoBJ,EAAKK,EAAzB,cAAgCL,EAAKM,EAArC,UAE5D,yBAAKb,UAAU,iBACZQ,EAAIP,KAAI,SAAAa,GACP,OAAO,yBAAKd,UAAU,iBAAiBS,MAAO,CAAEC,WAAW,OAAD,OAASI,EAAMH,EAAf,aAAqBG,EAAMF,EAA3B,cAAkCE,EAAMD,EAAxC,mB,cCE3DE,MAhBf,WACE,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,mBAAkB,6BAAK,kBAAC,IAAD,MAAsB,iDAA8B,6BAAK,iDAAyB,kBAAC,IAAD,QACxH,yBAAKA,UAAU,YACZF,EAASC,KAAKE,KAAI,SAAAa,GACjB,OAAO,yBAAKd,UAAU,iBAAiBS,MAAO,CAAEC,WAAW,OAAD,OAASI,EAAMH,EAAf,aAAqBG,EAAMF,EAA3B,cAAkCE,EAAMD,EAAxC,cAIhE,kBAACG,EAAD,CAAcjB,KAAMkB,MCTNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.277e1c7a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Spectrum = ({data}) => (\r\n    <div className=\"songs\">\r\n        {data.data.map(song => {\r\n          const { name, duration, average_frequency, converted_frequency, ahsl, hsl } = song;\r\n          return <div className=\"song\">\r\n            <div className=\"song-header\"><h3>{name}</h3></div>\r\n\r\n            <div className=\"description duration\"><p>Duration: </p></div>\r\n            <div className=\"data duration\"><p>{duration}</p></div>\r\n\r\n            <div className=\"description average-frequency\"><p>Average frequency: </p></div>\r\n            <div className=\"data average-frequency\"><p>{average_frequency}</p></div>\r\n\r\n            <div className=\"description converted-frequency\"><p>Converted frequency: </p></div>\r\n            <div className=\"data converted-frequency\"><p>{converted_frequency}</p></div>\r\n\r\n            <div className=\"description average-color\"><p>Average color: </p></div>\r\n            <div className=\"data average-color\"><div style={{ background: `hsl(${ahsl.h}, ${ahsl.s}%, ${ahsl.l}%)`}} /></div>\r\n\r\n            <div className=\"song-spectrum\">\r\n              {hsl.map(color => {\r\n                return <div className=\"spectrum-color\" style={{ background: `hsl(${color.h}, ${color.s}%, ${color.l}%)` }} />\r\n              })}\r\n            </div>\r\n          </div>\r\n        })}\r\n      </div>\r\n);\r\n\r\nexport default Spectrum;","import React from 'react';\nimport './styles/App.css';\n\nimport { FaLongArrowAltRight, FaLongArrowAltLeft } from 'react-icons/fa';\n\nimport SpectrumList from './components/SpectrumList';\n\nimport Spectrum from './output/spectrum';\nimport Output from './output/output'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"spectrum-wrapper\">\n        <div className=\"frequency-scale\"><div><FaLongArrowAltLeft /><p>Lower frequencies</p></div><div><p>Higher frequencies</p><FaLongArrowAltRight /></div></div>\n        <div className=\"spectrum\">\n          {Spectrum.data.map(color => {\n            return <div className=\"spectrum-color\" style={{ background: `hsl(${color.h}, ${color.s}%, ${color.l}%)`}} />\n          })}\n        </div>\n      </div>\n      <SpectrumList data={Output} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}